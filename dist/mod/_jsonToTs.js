import{titleCase as e}from"../utils/textify";function r(t,n=!0,o=[],i){if(null===t)return"null";if("string"==typeof t)return"string";if("boolean"==typeof t)return"boolean";if("number"==typeof t||"bigint"==typeof t)return"number";if(Array.isArray(t)){const p=t.map((t=>{const p=r(t,n,o);if(!n&&!Array.isArray(t)&&"object"==typeof t&&null!==t&&i){let r=e(i,"array");const t=new RegExp(`(?:interface|type)\\s(${r})\\s?=?\\s?{`,"g"),n=o.map((e=>t.exec(e))).filter(Boolean).sort().pop();n&&(r=e(i)+r);const f=`export interface ${r} ${p}`;return o.push(f),r}return p})).filter(((e,r,t)=>t.indexOf(e)>=r));return p.length<2?p.join()+"[]":`(${p.join(" | ")})[]`}if("object"==typeof t&&null!==t){return`{ ${Object.keys(t).map((p=>{const f=t[p],s=r(t[p],n,o,p);if(!n&&!Array.isArray(f)&&"object"==typeof f&&null!==f){let r=e(p);const t=new RegExp(`(?:interface|type)\\s(${r})\\s?=?\\s?{`,"g");o.map((e=>t.exec(e))).filter(Boolean).sort().pop()&&(r=(i=i?e(i):"Broken")+r);const n=`export interface ${r} ${s}`;return o.push(n),`${p}: ${r}`}return`${p}: ${s}`})).join("; ")} }`}throw new Error("Unimplemented deserialize data type "+typeof t)}export{r as _jsonToTs};